@startuml Create New Room (POST)

header CoWorking Sequence Diagram
footer Page %page% of %lastpage%
title "Create New Room (POST)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:coWorkingRouter" as coWorkingRouter
participant "<<router>>\n:roomRouter" as roomRouter
participant "<<middleware>>\n:protect" as protectMiddleware
participant "<<middleware>>\n:authorize" as authorizeMiddleware
participant "<<middleware>>\n:validateReqBody" as reqMiddleware
participant "<<controllers>>\n:roomController" as roomController
participant "<<model>>\n:Room" as roomModel
participant "<<model>>\n:Coworking" as coWorkingModel
participant "<<model>>\n:User" as userModel
database "<<PostgreSQL>>\n:room" as roomDatabase
database "<<PostgreSQL>>\n:coworking" as coWorkingDatabase
database "<<PostgreSQL>>\n:user" as userDatabase
participant "<<service>>\n:jwt" as jwt
participant "<<service>>\n:class-transformer" as classTransformer
participant "<<service>>\n:class-validator" as classValidator

client->server ++:req.post('/api/v1/coworkings/:coworking_id/rooms')
server->coWorkingRouter ++:app.use('/api/v1/coworkings',coWorkingRouter)
coWorkingRouter->roomRouter --++: router.use('/:coworking_id/rooms', roomRouter)

roomRouter -> protectMiddleware ++: protect()
protectMiddleware -> jwt ++: verify(token, JWT_SECRET)
jwt -> protectMiddleware --: decoded
protectMiddleware -> userModel ++: getUserById(decodedToken.id)
userModel -> userDatabase ++: query using id
userDatabase --> userModel --: queryResult
userModel --> protectMiddleware --: user
protectMiddleware --> roomRouter --: next()

roomRouter -> authorizeMiddleware ++: authorize(UserRole.ADMIN)
authorizeMiddleware -> roomRouter --: next()

roomRouter -> reqMiddleware ++: validateReqBody(CreateCoWorkingDTO)
reqMiddleware -> classTransformer ++: plainToInstance(CreateCoWorkingDTO, req.body)
classTransformer -> reqMiddleware --: dto
reqMiddleware -> classValidator ++: validateDto(dto)
classValidator --> reqMiddleware --: errorMessages
reqMiddleware --> roomRouter --: next()


roomRouter -> roomController ++:createNewRoom()
roomController -> coWorkingModel ++: getCoWorkingById(req.params.coworking_id)
coWorkingModel -> coWorkingDatabase ++: query using coworking_id
coWorkingDatabase --> coWorkingModel --: queryResult
coWorkingModel --> roomController --: coworkingExists

roomController->classTransformer ++: plainToInstance(CreateRoomDTO, req.body)
classTransformer -> roomController --: roomDto
roomController -> roomModel ++: createRoom(req.params.coworking_id,roomDTO)
roomModel -> roomDatabase ++: insert using roomDTO and coworking_id
roomDatabase --> roomModel --: queryResult
roomModel --> roomController --: newRoom
roomController -> client --: response

@enduml