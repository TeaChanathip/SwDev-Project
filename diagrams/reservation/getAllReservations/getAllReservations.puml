@startuml Get All Reservations (GET)

header CoWorking Sequence Diagram
footer Page %page% of %lastpage%
title "Get All Reservations (GET)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:roomRouter" as roomRouter
participant "<<router>>\n:reservationRouter" as reservationRouter
participant "<<middleware>>\n:protect" as protectMiddleware
participant "<<middleware>>\n:validateQueryParams" as queryMiddleware
participant "<<controllers>>\n:reservationController" as reservationController
participant "<<model>>\n:Room" as roomModel
participant "<<model>>\n:Coworking" as coWorkingModel
participant "<<model>>\n:User" as userModel
participant "<<model>>\n:Reservation" as reservationModel
database "<<PostgreSQL>>\n:room" as roomDatabase
database "<<PostgreSQL>>\n:coworking" as coWorkingDatabase
database "<<PostgreSQL>>\n:user" as userDatabase
database "<<PostgreSQL>>\n:reservation" as reservationDatabase
participant "<<service>>\n:jwt" as jwt

alt access from /api/v1/rooms
client->server ++:req.get('/api/v1/reservations/:id')
server->reservationRouter ++:app.use('/api/v1/reservations',reservationRouter)
else access from /api/v1/coworkings/:coworking_id/rooms
client->server :req.get('/api/v1/rooms/:room_id/reservations/:id')
server->roomRouter ++:app.use('/api/v1/rooms',roomRouter)
roomRouter->reservationRouter --: router.use('/:room_id/reservations', reservationRouter)
end

reservationRouter -> protectMiddleware ++: protect()
protectMiddleware -> jwt ++: verify(token, JWT_SECRET)
jwt -> protectMiddleware --: decoded
protectMiddleware -> userModel ++: getUserById(decodedToken.id)
userModel -> userDatabase ++: query using id
userDatabase --> userModel --: queryResult
userModel --> protectMiddleware --: user
protectMiddleware --> reservationRouter --: next()

reservationRouter -> queryMiddleware ++: validateQueryParams(GetAllCoworkingDTO)
queryMiddleware -> classTransformer ++: plainToInstance(GetAllCoworkingDTO, req.query)
classTransformer -> queryMiddleware --: dto
queryMiddleware -> classValidator ++: validateDto(dto)
classValidator --> queryMiddleware --: errorMessages
queryMiddleware --> reservationRouter --: next()



reservationRouter -> reservationController ++:getAllReservations()

reservationController->classTransformer ++: plainToInstance(GetAllReservationDTO, req.query)
classTransformer -> reservationController --: getAllReservationDTO

alt query param has owner_id:
    alt role is user:
        reservationController --> client : FORBIDDEN
    else role is admin:
        reservationController -> userModel ++: getUserById(req.params.owner_id)
        userModel -> userDatabase ++: query using owner_id
        userDatabase --> userModel --: queryResult
        userModel --> reservationController --: userExists
end

alt access from /api/v1/rooms/:room_id/reservations/:id
    reservationController -> roomModel ++: getRoomById(req.params.room_id)
    roomModel -> roomDatabase ++: query using coworking_id
    roomDatabase --> roomModel --: queryResult
    roomModel --> reservationController --: coworkingExists 
    reservationController -> reservationModel ++: getAllReservations(req.params.id, req.params.room_id)
else access from /api/v1/reservations/:id
    reservationController -> reservationModel : getAllReservations(req.params.id)
end
reservationModel -> reservationDatabase ++: query using params and queries
reservationDatabase --> reservationModel --: queryResult
reservationModel --> reservationController --: reservation
reservationController -> client --: response


@enduml