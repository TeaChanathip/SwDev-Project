{
	"info": {
		"_postman_id": "7a48f404-efbb-4602-bcd7-593fc732e9ac",
		"name": "CoWorkingSpace",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41338379"
	},
	"item": [
		{
			"name": "Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include correct user\", function () {",
							"    pm.expect(resJson.data).have.property(\"email\", \"user1@gmail.com\");",
							"});",
							"",
							"pm.test(\"Response should include token\", function () {",
							"    pm.expect(resJson.token).to.not.be.undefined;",
							"});",
							"",
							"if (pm.response.code === 201) {",
							"    pm.execution.setNextRequest(\"Register Duplicated User\");",
							"    pm.environment.set(\"USER_TOKEN\", resJson.token);",
							"} else {",
							"    pm.execution.setNextRequest(null);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"user1\",\n    \"phone\": \"+66 912345678\",\n    \"email\": \"user1@gmail.com\",\n    \"password\": \"123456\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/auth/register",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register Duplicated User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.execution.setNextRequest(\"Register with Bad Body\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"duplicated user1\",\n    \"phone\": \"+66 912345678\",\n    \"email\": \"user1@gmail.com\",\n    \"password\": \"654321\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/auth/register",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register with Bad Body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include warning messages\", function () {",
							"    pm.expect(resJson.msg).to.have.length(4);",
							"});",
							"",
							"pm.execution.setNextRequest(\"Login as User\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"user1%$^*\",\n    \"phone\": \"03984\",\n    \"email\": \"user1gmail.com\",\n    \"password\": \"111\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/auth/register",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login as User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"User role should be 'user'\", function () {",
							"    pm.expect(resJson.data).have.property(\"role\", \"user\");",
							"});",
							"",
							"pm.test(\"Response should include token\", function () {",
							"    pm.expect(resJson.token).to.not.be.undefined;",
							"});",
							"",
							"if (pm.response.code === 201) {",
							"    pm.execution.setNextRequest(\"Login with Incorrect Credentials\");",
							"    pm.environment.set(\"USER_TOKEN\", resJson.token);",
							"    pm.environment.set(\"USER1_ID\", resJson.data.id);",
							"} else {",
							"    pm.execution.setNextRequest(null);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"user1@gmail.com\",\n    \"password\": \"123456\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/auth/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with Incorrect Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.execution.setNextRequest(\"Get All CoWorkings\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"user1@gmail.com\",\n    \"password\": \"123456666\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/auth/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All CoWorkings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include 7 coworkings\", function () {",
							"    pm.expect(resJson.data).to.have.length(7);",
							"});",
							"",
							"if (resJson.data.length > 0) {",
							"    pm.environment.set(\"COWORKING1_ID\", resJson.data[0].id);",
							"    pm.execution.setNextRequest(\"Get All Rooms\");",
							"} else {",
							"    pm.execution.setNextRequest(null);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/v1/coworkings/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"coworkings",
						""
					],
					"query": [
						{
							"key": "name",
							"value": null,
							"disabled": true
						},
						{
							"key": "address",
							"value": null,
							"disabled": true
						},
						{
							"key": "open_time",
							"value": null,
							"disabled": true
						},
						{
							"key": "close_time",
							"value": null,
							"disabled": true
						},
						{
							"key": "created_after",
							"value": null,
							"disabled": true
						},
						{
							"key": "created_before",
							"value": null,
							"disabled": true
						},
						{
							"key": "updated_after",
							"value": null,
							"disabled": true
						},
						{
							"key": "updated_before",
							"value": null,
							"disabled": true
						},
						{
							"key": "limit",
							"value": null,
							"disabled": true
						},
						{
							"key": "page",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Rooms",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include 8 rooms\", function () {",
							"    pm.expect(resJson.data).to.have.length(8);",
							"});",
							"",
							"if (resJson.data.length > 0) {",
							"    pm.execution.setNextRequest(\"Get All Rooms in CoWorking\");",
							"} else {",
							"    pm.execution.setNextRequest(null);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "",
							"value": "",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{URL}}/api/v1/rooms/",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"rooms",
						""
					],
					"query": [
						{
							"key": "name",
							"value": null,
							"disabled": true
						},
						{
							"key": "capacity",
							"value": null,
							"disabled": true
						},
						{
							"key": "price",
							"value": null,
							"disabled": true
						},
						{
							"key": "created_after",
							"value": null,
							"disabled": true
						},
						{
							"key": "created_before",
							"value": null,
							"disabled": true
						},
						{
							"key": "updated_after",
							"value": null,
							"disabled": true
						},
						{
							"key": "updated_before",
							"value": null,
							"disabled": true
						},
						{
							"key": "limit",
							"value": null,
							"disabled": true
						},
						{
							"key": "page",
							"value": null,
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Rooms in CoWorking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include 4 rooms\", function () {",
							"    pm.expect(resJson.data).to.have.length(4);",
							"});",
							"",
							"if (resJson.data.length >= 4) {",
							"    pm.environment.set(\"ROOM1_ID\", resJson.data[0].id)",
							"    pm.environment.set(\"ROOM2_ID\", resJson.data[1].id)",
							"    pm.environment.set(\"ROOM3_ID\", resJson.data[2].id)",
							"    pm.environment.set(\"ROOM4_ID\", resJson.data[3].id)",
							"    pm.execution.setNextRequest(\"Reserve Room1\");",
							"} else {",
							"    pm.execution.setNextRequest(null);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/v1/coworkings/:coworking_id/rooms",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"coworkings",
						":coworking_id",
						"rooms"
					],
					"query": [
						{
							"key": "name",
							"value": null,
							"disabled": true
						},
						{
							"key": "address",
							"value": null,
							"disabled": true
						},
						{
							"key": "open_time",
							"value": null,
							"disabled": true
						},
						{
							"key": "close_time",
							"value": null,
							"disabled": true
						},
						{
							"key": "created_after",
							"value": null,
							"disabled": true
						},
						{
							"key": "created_before",
							"value": null,
							"disabled": true
						},
						{
							"key": "updated_after",
							"value": null,
							"disabled": true
						},
						{
							"key": "updated_before",
							"value": null,
							"disabled": true
						},
						{
							"key": "limit",
							"value": null,
							"disabled": true
						},
						{
							"key": "page",
							"value": null,
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "coworking_id",
							"value": "{{COWORKING1_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Reserve Room1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include correct reservation data\", function() {",
							"    pm.expect(resJson.data).to.have.property(\"owner_id\", pm.environment.get(\"USER1_ID\"));",
							"    pm.expect(resJson.data).to.have.property(\"room_id\", pm.environment.get(\"ROOM1_ID\"));",
							"    pm.expect(resJson.data).to.have.property(\"start_at\", \"2026-12-31T06:01:00.000Z\");",
							"    pm.expect(resJson.data).to.have.property(\"end_at\", \"2026-12-31T08:00:00.000Z\");",
							"})",
							"",
							"pm.environment.set(\"RESERVE1_ID\", resJson.data.id);",
							"pm.execution.setNextRequest(\"Reserve Room with Bad Body\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"start_at\": \"2026-12-31T06:01:00\",\n    \"end_at\": \"2026-12-31T08:00:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/rooms/:id/reservations",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"rooms",
						":id",
						"reservations"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{ROOM1_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Reserve Room with Bad Body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include warning messages\", function() {",
							"    pm.expect(resJson.msg).to.have.length.greaterThan(0);",
							"})",
							"",
							"pm.execution.setNextRequest(\"Reserve Non-Exist Room\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"start_at\": \"2022-12-31T06:01:00\",\n    \"end_at\": \"2022-12-31T08:00:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/rooms/:id/reservations",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"rooms",
						":id",
						"reservations"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{ROOM2_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Reserve Non-Exist Room",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.execution.setNextRequest(\"Reserve Room at Unavailable Time\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"start_at\": \"2026-12-31T06:01:00\",\n    \"end_at\": \"2026-12-31T08:00:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/rooms/:id/reservations",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"rooms",
						":id",
						"reservations"
					],
					"variable": [
						{
							"key": "id",
							"value": "99"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Reserve Room at Unavailable Time",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 409\", function () {",
							"    pm.response.to.have.status(409);",
							"});",
							"",
							"pm.execution.setNextRequest(\"Reserve Room2\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"start_at\": \"2026-12-31T06:01:00\",\n    \"end_at\": \"2026-12-31T07:00:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/rooms/:id/reservations",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"rooms",
						":id",
						"reservations"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{ROOM1_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Reserve Room2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include correct reservation data\", function() {",
							"    pm.expect(resJson.data).to.have.property(\"owner_id\", pm.environment.get(\"USER1_ID\"));",
							"    pm.expect(resJson.data).to.have.property(\"room_id\", pm.environment.get(\"ROOM2_ID\"));",
							"    pm.expect(resJson.data).to.have.property(\"start_at\", \"2026-12-31T06:01:00.000Z\");",
							"    pm.expect(resJson.data).to.have.property(\"end_at\", \"2026-12-31T08:00:00.000Z\");",
							"})",
							"",
							"pm.execution.setNextRequest(\"Reserve Room3\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"start_at\": \"2026-12-31T06:01:00\",\n    \"end_at\": \"2026-12-31T08:00:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/rooms/:id/reservations",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"rooms",
						":id",
						"reservations"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{ROOM2_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Reserve Room3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include correct reservation data\", function() {",
							"    pm.expect(resJson.data).to.have.property(\"owner_id\", pm.environment.get(\"USER1_ID\"));",
							"    pm.expect(resJson.data).to.have.property(\"room_id\", pm.environment.get(\"ROOM3_ID\"));",
							"    pm.expect(resJson.data).to.have.property(\"start_at\", \"2026-12-31T06:01:00.000Z\");",
							"    pm.expect(resJson.data).to.have.property(\"end_at\", \"2026-12-31T08:00:00.000Z\");",
							"})",
							"",
							"pm.execution.setNextRequest(\"Reserve More Than 3 Rooms\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"start_at\": \"2026-12-31T06:01:00\",\n    \"end_at\": \"2026-12-31T08:00:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/rooms/:id/reservations",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"rooms",
						":id",
						"reservations"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{ROOM3_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Reserve More Than 3 Rooms",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.execution.setNextRequest(\"Get My Reservations\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"start_at\": \"2026-12-31T06:01:00\",\n    \"end_at\": \"2026-12-31T08:00:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/rooms/:id/reservations",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"rooms",
						":id",
						"reservations"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{ROOM4_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get My Reservations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include 3 reservations\", function () {",
							"    pm.expect(resJson.data).to.have.length(3);",
							"});",
							"",
							"pm.execution.setNextRequest(\"Update Reservation\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/v1/reservations",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"reservations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Reservation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include correct reservation data\", function() {",
							"    pm.expect(resJson.data).to.have.property(\"start_at\", \"2027-06-15T06:01:00.000Z\");",
							"    pm.expect(resJson.data).to.have.property(\"end_at\", \"2027-06-15T08:00:00.000Z\");",
							"})",
							"",
							"pm.execution.setNextRequest(\"Delete Reservation\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"start_at\": \"2027-06-15T06:01:00\",\n    \"end_at\": \"2027-06-15T08:00:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/reservations/:id",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"reservations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{RESERVE1_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Reservation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include empty data\", function() {",
							"    pm.expect(resJson.data).to.deep.equal({});",
							"})",
							"",
							"pm.execution.setNextRequest(\"User Logout\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{USER_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/reservations/:id",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"reservations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{RESERVE1_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Token in cookies should be 'null'\", function () {",
							"    const cookies = pm.cookies.toObject();",
							"    pm.expect(cookies).to.have.property(\"token\");",
							"    pm.expect(cookies.token).to.eql(\"null\");",
							"});",
							"",
							"// pm.environment.set(\"TOKEN\", \"null\");",
							"",
							"pm.execution.setNextRequest(\"Login as Admin\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/v1/auth/logout",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login as Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Status code should be 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"User role should be 'admin'\", function () {",
							"    pm.expect(resJson.data).have.property(\"role\", \"admin\");",
							"});",
							"",
							"pm.test(\"Response should include token\", function () {",
							"    pm.expect(resJson.token).to.not.be.undefined;",
							"});",
							"",
							"if (pm.response.code === 201) {",
							"    pm.environment.set(\"ADMIN_TOKEN\", resJson.token);",
							"    pm.execution.setNextRequest(\"Admin Get All Reservations\");",
							"} else {",
							"    pm.execution.setNextRequest(null);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"admin1@gmail.com\",\n    \"password\": \"123456\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/auth/login",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin Get All Reservations",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include 2 reservations\", function () {",
							"    pm.expect(resJson.data).to.have.length(2);",
							"});",
							"",
							"pm.environment.set(\"RESERVE2_ID\", resJson.data[0].id);",
							"pm.execution.setNextRequest(\"Admin Update Reservation\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMIN_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/v1/reservations",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"reservations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin Update Reservation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include correct reservation data\", function() {",
							"    pm.expect(resJson.data).to.have.property(\"start_at\", \"2028-03-07T06:01:00.000Z\");",
							"    pm.expect(resJson.data).to.have.property(\"end_at\", \"2028-03-07T08:00:00.000Z\");",
							"})",
							"",
							"pm.execution.setNextRequest(\"Admin Delete Reservation\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMIN_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"start_at\": \"2028-03-07T06:01:00\",\n    \"end_at\": \"2028-03-07T08:00:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/reservations/:id",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"reservations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{RESERVE2_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin Delete Reservation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code should be 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const resJson = pm.response.json();",
							"pm.test(\"Response should include empty data\", function() {",
							"    pm.expect(resJson.data).to.deep.equal({});",
							"})",
							"",
							"pm.execution.setNextRequest(\"(CLEAN) Delete User1\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMIN_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}/api/v1/reservations/:id",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"reservations",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{RESERVE2_ID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "(CLEAN) Delete User1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.execution.setNextRequest(null);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMIN_TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}/api/v1/users/:id",
					"host": [
						"{{URL}}"
					],
					"path": [
						"api",
						"v1",
						"users",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "{{USER1_ID}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "http://localhost:5000",
			"type": "string"
		}
	]
}